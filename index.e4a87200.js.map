{"mappings":"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","sources":["<anon>","src/main.ts","../state-manager/src/index.ts","../state-manager/src/state-manager.ts","../state-manager/src/types.ts","../starwars-utilities/src/index.ts","../starwars-utilities/src/models/index.ts","../starwars-utilities/src/models/person.ts","../starwars-utilities/src/models/planet.ts","../starwars-utilities/src/models/species.ts","../starwars-utilities/src/utilities/index.ts","../starwars-utilities/src/utilities/get-reptile-planets.ts","../starwars-utilities/src/api/index.ts","../starwars-utilities/src/api/main-api.ts"],"sourcesContent":["var $210db04a67cdb6fe$export$1385d81a6c6bbcd4;\n(function(ActionTypes) {\n    ActionTypes[\"UPDATE_STATE\"] = \"UPDATE_STATE\";\n    ActionTypes[\"RESET_STATE\"] = \"RESET_STATE\";\n})($210db04a67cdb6fe$export$1385d81a6c6bbcd4 || ($210db04a67cdb6fe$export$1385d81a6c6bbcd4 = {}));\n\n\nclass $c429e947532d0e83$var$StateManager {\n    constructor(initialState, middlewares = []){\n        this.state = initialState;\n        this.initialState = initialState;\n        this.listeners = new Set();\n        this.middlewares = middlewares;\n    }\n    notify() {\n        this.listeners.forEach((cb)=>cb?.(this.state));\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    setState(newState) {\n        this.state = {\n            ...this.state,\n            ...newState\n        };\n        this.notify();\n    }\n    getState() {\n        return this.state;\n    }\n    // Method to get actions for updating or resetting the state\n    getActions() {\n        return {\n            updateState: (payload)=>({\n                    type: (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).UPDATE_STATE,\n                    payload: payload\n                }),\n            resetState: ()=>({\n                    type: (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).RESET_STATE\n                })\n        };\n    }\n    // Method to dispatch an action through middlewares and update state\n    dispatch(action) {\n        return new Promise((resolve, reject)=>{\n            // Create a middleware chain that calls each middleware in order\n            const chain = this.middlewares.reduceRight((next, middleware)=>(action)=>middleware(this, next)(action), // Final function to apply action after all middlewares have run\n            (action)=>{\n                const error = this.applyAction(action);\n                if (error) reject(error);\n                resolve(this.getState());\n            });\n            // Start the chain with the action\n            chain(action);\n        });\n    }\n    // Private method to apply action and update state accordingly\n    applyAction(action) {\n        switch(action.type){\n            case (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).UPDATE_STATE:\n                this.setState(action.payload);\n                break;\n            case (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).RESET_STATE:\n                this.setState(this.initialState);\n                break;\n            default:\n                return new Error(\"Unknown action type\");\n        }\n    }\n}\nvar $c429e947532d0e83$export$2e2bcd8739ae039 = $c429e947532d0e83$var$StateManager;\n\n\n\nvar $e3dda3f55bf6ba98$export$2e2bcd8739ae039 = (0, $c429e947532d0e83$export$2e2bcd8739ae039);\n\n\n\n\n\n\n\n\n\n\nconst $42db40512559f5bc$export$ca6dda5263526f75 = \"https://swapi.dev/api\";\nconst $42db40512559f5bc$export$8134c072fddab6a5 = async (url)=>{\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(`Failed to fetch data from ${url}`);\n    return response.json();\n};\n\n\n\n\nconst $666e99b42452f813$export$e76d9d9ee492d406 = async ()=>{\n    try {\n        let planets = [];\n        // Recursively fetch and set all planets data\n        const fetchPlanetsData = async (url)=>{\n            const response = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(url);\n            planets = [\n                ...planets,\n                ...response.results\n            ];\n            let nextPageUrl = response.next;\n            if (nextPageUrl) return fetchPlanetsData(nextPageUrl);\n        };\n        await fetchPlanetsData(\"https://swapi.dev/api/planets\");\n        const planetPromises = planets?.map(async (planet)=>{\n            if (planet.films.length === 0) return null;\n            const reptilePlanet = await $666e99b42452f813$var$hasPlanetReptileResident(planet);\n            return reptilePlanet ? planet : null;\n        });\n        const filteredPlanets = await Promise.all(planetPromises);\n        return filteredPlanets.filter((planet)=>planet !== null);\n    } catch (error) {\n        console.error(\"Error fetching planets:\", error);\n        return [];\n    }\n};\n// Check if a resident has a reptile specie\nconst $666e99b42452f813$var$isResidentReptile = async (person)=>{\n    const speciesUrls = person.species;\n    const iter = async (currentIndex)=>{\n        const url = speciesUrls[currentIndex];\n        const isLastUrl = currentIndex === speciesUrls.length - 1;\n        try {\n            const specie = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(url);\n            const isReptile = true;\n            return isReptile ? specie : isLastUrl ? null : iter(currentIndex + 1);\n        } catch (e) {\n            return null;\n        }\n    };\n    const reptileSpecie = await iter(0);\n    return Boolean(reptileSpecie);\n};\n// Check if a planet has a reptile resident\nconst $666e99b42452f813$var$hasPlanetReptileResident = async (planet)=>{\n    const residentUrls = planet.residents;\n    const iter = async (currentIndex)=>{\n        const url = residentUrls[currentIndex];\n        const isLastUrl = currentIndex === residentUrls.length - 1;\n        try {\n            const resident = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(url);\n            const isReptile = await $666e99b42452f813$var$isResidentReptile(resident);\n            return isReptile ? resident : isLastUrl ? null : iter(currentIndex + 1);\n        } catch (e) {\n            return null;\n        }\n    };\n    const reptileSpecie = await iter(0);\n    return Boolean(reptileSpecie);\n};\n\n\n\n\n\n\n// Initialize StateManager with an empty initial state and no middlewares\nconst $ad2bcec7a0192558$var$initialState = {\n    planets: []\n};\nconst $ad2bcec7a0192558$var$stateManager = new (0, $e3dda3f55bf6ba98$export$2e2bcd8739ae039)($ad2bcec7a0192558$var$initialState, []);\n// Subscribe to state changes to update the UI\n$ad2bcec7a0192558$var$stateManager.subscribe((state)=>{\n    $ad2bcec7a0192558$var$updateUI(state.planets);\n});\n// Fetch planets data and update the state\n(0, $666e99b42452f813$export$e76d9d9ee492d406)().then((planets)=>{\n    console.log(planets);\n    $ad2bcec7a0192558$var$stateManager.dispatch($ad2bcec7a0192558$var$stateManager.getActions().updateState({\n        planets: planets\n    }));\n});\n// Function to update the UI with planet data\nfunction $ad2bcec7a0192558$var$updateUI(planets) {\n    const container = document.getElementById(\"planet-container\");\n    container.innerHTML = \"\"; // Clear previous content\n    planets.forEach((planet)=>{\n        const card = $ad2bcec7a0192558$var$createPlanetCard(planet);\n        container.appendChild(card);\n    });\n}\n// Function to create a planet card element\nfunction $ad2bcec7a0192558$var$createPlanetCard(planet) {\n    const card = document.createElement(\"div\");\n    card.className = \"bg-gray-800 p-4 rounded-lg shadow-lg flex items-center justify-between\";\n    const planetInfo = document.createElement(\"div\");\n    planetInfo.innerHTML = `\n    <div class=\"text-yellow-500 text-sm\">Planet.created</div>\n    <div class=\"text-2xl font-bold\">${planet.name}</div>\n    <div class=\"text-gray-400\">${planet.climate}</div>\n    <div>${planet.films.map((film)=>film).join(\", \")}</div>\n  `;\n    const iconContainer = document.createElement(\"div\");\n    iconContainer.className = \"text-yellow-500 text-2xl\";\n    iconContainer.innerHTML = '<i class=\"fas fa-toothbrush\"></i>';\n    card.appendChild(planetInfo);\n    card.appendChild(iconContainer);\n    return card;\n}\n\n\n//# sourceMappingURL=index.e4a87200.js.map\n","import StateManager from \"@packages/state-manager\";\nimport { Planet, getReptilePlanets } from \"@packages/starwars-utilities\";\n// Initialize StateManager with an empty initial state and no middlewares\nconst initialState = { planets: [] };\nconst stateManager = new StateManager(initialState, []);\n\n// Subscribe to state changes to update the UI\nstateManager.subscribe((state: typeof initialState) => {\n  updateUI(state.planets);\n});\n\n// Fetch planets data and update the state\ngetReptilePlanets().then((planets: Planet[]) => {\n  console.log(planets);\n  stateManager.dispatch(stateManager.getActions().updateState({ planets }));\n});\n// Function to update the UI with planet data\nfunction updateUI(planets: Planet[]) {\n  const container = document.getElementById(\"planet-container\");\n  container.innerHTML = \"\"; // Clear previous content\n  planets.forEach((planet) => {\n    const card = createPlanetCard(planet);\n    container.appendChild(card);\n  });\n}\n\n// Function to create a planet card element\nfunction createPlanetCard(planet: Planet) {\n  const card = document.createElement(\"div\");\n  card.className =\n    \"bg-gray-800 p-4 rounded-lg shadow-lg flex items-center justify-between\";\n\n  const planetInfo = document.createElement(\"div\");\n  planetInfo.innerHTML = `\n    <div class=\"text-yellow-500 text-sm\">Planet.created</div>\n    <div class=\"text-2xl font-bold\">${planet.name}</div>\n    <div class=\"text-gray-400\">${planet.climate}</div>\n    <div>${planet.films.map((film) => film).join(\", \")}</div>\n  `;\n\n  const iconContainer = document.createElement(\"div\");\n  iconContainer.className = \"text-yellow-500 text-2xl\";\n  iconContainer.innerHTML = '<i class=\"fas fa-toothbrush\"></i>';\n\n  card.appendChild(planetInfo);\n  card.appendChild(iconContainer);\n\n  return card;\n}\n","import StateManager from \"./state-manager\";\nexport default StateManager;\nexport * from \"./types\";\n","import {\n  Action,\n  ActionTypes,\n  State as StateType,\n  Listener,\n  Middleware,\n} from \"./types\";\n\nclass StateManager<State extends StateType> {\n  private state: Readonly<State>;\n  private initialState: State;\n  listeners: Set<Listener<State>>;\n  middlewares: Array<Middleware<State>>;\n\n  constructor(initialState: State, middlewares: Array<Middleware<State>> = []) {\n    this.state = initialState;\n    this.initialState = initialState;\n    this.listeners = new Set();\n    this.middlewares = middlewares;\n  }\n\n  private notify() {\n    this.listeners.forEach((cb) => cb?.(this.state));\n  }\n\n  subscribe(listener: Listener<State>) {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private setState(newState: Partial<State>) {\n    this.state = { ...this.state, ...newState };\n    this.notify();\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  // Method to get actions for updating or resetting the state\n  getActions() {\n    return {\n      updateState: (payload: Partial<State>) =>\n        ({\n          type: ActionTypes.UPDATE_STATE,\n          payload,\n        } as const),\n      resetState: () =>\n        ({\n          type: ActionTypes.RESET_STATE,\n        } as const),\n    };\n  }\n\n  // Method to dispatch an action through middlewares and update state\n  dispatch(action: Action<State>): Promise<State> {\n    return new Promise((resolve, reject) => {\n      // Create a middleware chain that calls each middleware in order\n      const chain = this.middlewares.reduceRight(\n        (next, middleware) => (action) => middleware(this, next)(action),\n        // Final function to apply action after all middlewares have run\n        (action: Action<State>) => {\n          const error = this.applyAction(action);\n          if (error) {\n            reject(error);\n          }\n          resolve(this.getState());\n        }\n      );\n      // Start the chain with the action\n      chain(action);\n    });\n  }\n\n  // Private method to apply action and update state accordingly\n  private applyAction(action: Action<State>) {\n    switch (action.type) {\n      case ActionTypes.UPDATE_STATE:\n        this.setState(action.payload);\n        break;\n      case ActionTypes.RESET_STATE:\n        this.setState(this.initialState);\n        break;\n      default:\n        return new Error(\"Unknown action type\");\n    }\n  }\n}\nexport default StateManager;\n","import StateManager from \"./state-manager\";\n\nexport type State = Record<string, unknown>;\nexport type Listener<S extends State> = (updatedState: S) => void;\n\nexport type Middleware<S extends State> = (\n  stateManager: StateManager<S>,\n  next: (action: Action<S>) => void\n) => (action: Action<S>) => void;\n\nexport type Action<State> = UpdateAction<State> | ResetAction;\n\nexport enum ActionTypes {\n  UPDATE_STATE = \"UPDATE_STATE\",\n  RESET_STATE = \"RESET_STATE\",\n}\nexport interface UpdateAction<State> {\n  type: ActionTypes.UPDATE_STATE;\n  payload: Partial<State>;\n}\nexport interface ResetAction {\n  type: ActionTypes.RESET_STATE;\n}\n","export * from \"./models\";\nexport * from \"./utilities\";\n","export * from \"./person\";\nexport * from \"./planet\";\nexport * from \"./species\";\n","export interface Person {\n  name: string;\n  height: string;\n  mass: string;\n  hair_color: string;\n  skin_color: string;\n  eye_color: string;\n  birth_year: string;\n  gender: string;\n  homeworld: string;\n  films: string[];\n  species: string[];\n  vehicles: string[];\n  starships: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\n","import { PaginatedResponse } from './paginated-response';\nexport interface Planet {\n  name: string;\n  rotation_period: string;\n  orbital_period: string;\n  diameter: string;\n  climate: string;\n  gravity: string;\n  terrain: string;\n  surface_water: string;\n  population: string;\n  residents: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\n\nexport type PlanetsResponse = PaginatedResponse<Planet>\n","export interface Species {\n  name: string;\n  classification: string;\n  designation: string;\n  average_height: string;\n  skin_colors: string;\n  hair_colors: string;\n  eye_colors: string;\n  average_lifespan: string;\n  homeworld: string;\n  language: string;\n  people: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\n","export * from \"./get-reptile-planets\";\n","import { fetchData } from \"../api\";\nimport { Person, Planet, PlanetsResponse, Species } from \"../models\";\n\nexport const getReptilePlanets = async (): Promise<Array<Planet>> => {\n  try {\n    let planets: Planet[] = [];\n    // Recursively fetch and set all planets data\n    const fetchPlanetsData = async (url: string) => {\n      const response: PlanetsResponse = await fetchData(url);\n      planets = [...planets, ...response.results];\n      let nextPageUrl = response.next;\n      if (nextPageUrl) return fetchPlanetsData(nextPageUrl);\n    };\n    await fetchPlanetsData(\"https://swapi.dev/api/planets\");\n\n    const planetPromises = planets?.map(async (planet: Planet) => {\n      if (planet.films.length === 0) {\n        return null;\n      }\n      const reptilePlanet = await hasPlanetReptileResident(planet);\n      return reptilePlanet ? planet : null;\n    });\n    const filteredPlanets = await Promise.all(planetPromises);\n    return filteredPlanets.filter((planet) => planet !== null);\n  } catch (error) {\n    console.error(\"Error fetching planets:\", error);\n    return [];\n  }\n};\n// Check if a resident has a reptile specie\nconst isResidentReptile = async (person: Person) => {\n  const speciesUrls = person.species;\n\n  const iter = async (currentIndex: number): Promise<Species | null> => {\n    const url = speciesUrls[currentIndex];\n    const isLastUrl = currentIndex === speciesUrls.length - 1;\n\n    try {\n      const specie = await fetchData(url);\n      const isReptile = true;\n      return isReptile ? specie : isLastUrl ? null : iter(currentIndex + 1);\n    } catch (e) {\n      return null;\n    }\n  };\n  const reptileSpecie = await iter(0);\n  return Boolean(reptileSpecie);\n};\n// Check if a planet has a reptile resident\n\nconst hasPlanetReptileResident = async (planet: Planet) => {\n  const residentUrls = planet.residents;\n\n  const iter = async (currentIndex: number): Promise<Person | null> => {\n    const url = residentUrls[currentIndex];\n    const isLastUrl = currentIndex === residentUrls.length - 1;\n\n    try {\n      const resident = await fetchData(url);\n      const isReptile = await isResidentReptile(resident);\n      return isReptile ? resident : isLastUrl ? null : iter(currentIndex + 1);\n    } catch (e) {\n      return null;\n    }\n  };\n  const reptileSpecie = await iter(0);\n  return Boolean(reptileSpecie);\n};\n","export * from \"./main-api\";\n","export const BASE_URL = \"https://swapi.dev/api\";\n\n export const fetchData = async (url: string) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch data from ${url}`);\n  }\n  return response.json();\n};\n"],"names":["ActionTypes","$210db04a67cdb6fe$export$1385d81a6c6bbcd4","$c429e947532d0e83$export$2e2bcd8739ae039","constructor","initialState","middlewares","state","listeners","Set","notify","forEach","cb","subscribe","listener","add","delete","setState","newState","getState","getActions","updateState","payload","type","UPDATE_STATE","resetState","RESET_STATE","dispatch","action","Promise","resolve","reject","chain","reduceRight","next","middleware","error","applyAction","Error","$42db40512559f5bc$export$8134c072fddab6a5","url","response","fetch","ok","json","$666e99b42452f813$export$e76d9d9ee492d406","planets","fetchPlanetsData","results","nextPageUrl","planetPromises","map","planet","films","length","reptilePlanet","$666e99b42452f813$var$hasPlanetReptileResident","filteredPlanets","all","filter","console","$666e99b42452f813$var$isResidentReptile","person","speciesUrls","species","iter","currentIndex","e","Boolean","residentUrls","residents","isLastUrl","resident","isReptile","$ad2bcec7a0192558$var$stateManager","$ad2bcec7a0192558$var$updateUI","container","document","getElementById","innerHTML","card","$ad2bcec7a0192558$var$createPlanetCard","createElement","className","planetInfo","name","climate","film","join","iconContainer","appendChild","then","log"],"version":3,"file":"index.e4a87200.js.map"}