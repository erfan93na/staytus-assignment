{"mappings":"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","sources":["<anon>","src/main.ts","../starwars-utilities/src/index.ts","../starwars-utilities/src/models/index.ts","../starwars-utilities/src/models/person.ts","../starwars-utilities/src/models/planet.ts","../starwars-utilities/src/models/species.ts","../starwars-utilities/src/models/film.ts","../starwars-utilities/src/utilities/index.ts","../starwars-utilities/src/utilities/get-reptile-planets.ts","../starwars-utilities/src/api/index.ts","../starwars-utilities/src/api/main-api.ts","../state-manager/src/index.ts","../state-manager/src/state-manager.ts","../state-manager/src/types.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\nconst $42db40512559f5bc$export$ca6dda5263526f75 = \"https://swapi.dev/api\";\nconst $42db40512559f5bc$export$8134c072fddab6a5 = async (url)=>{\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(`Failed to fetch data from ${url}`);\n    return response.json();\n};\n\n\n\n\nconst $666e99b42452f813$export$e76d9d9ee492d406 = async ()=>{\n    try {\n        let planets = [];\n        // Recursively fetch and set all planets data\n        const fetchPlanetsData = async (url)=>{\n            const response = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(url);\n            planets = [\n                ...planets,\n                ...response.results\n            ];\n            let nextPageUrl = response.next;\n            if (nextPageUrl) return fetchPlanetsData(nextPageUrl);\n        };\n        await fetchPlanetsData(\"https://swapi.dev/api/planets\");\n        const planetPromises = planets?.map(async (planet)=>{\n            if (planet.films.length === 0) return null;\n            const reptilePlanet = await $666e99b42452f813$var$hasPlanetReptileResident(planet);\n            return reptilePlanet ? planet : null;\n        });\n        let filteredPlanets = await Promise.all(planetPromises);\n        filteredPlanets = filteredPlanets.filter((planet)=>planet !== null);\n        const planetsWithFilmDataPromises = filteredPlanets.map(async (planet)=>{\n            let filmsData = await Promise.all(planet.films.map(async (filmUrl)=>{\n                try {\n                    const filmData = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(filmUrl);\n                    return filmData;\n                } catch  {\n                    return null;\n                }\n            }));\n            filmsData = filmsData.filter((data)=>data !== null);\n            return {\n                ...planet,\n                filmsData: filmsData\n            };\n        });\n        return Promise.all(planetsWithFilmDataPromises);\n    } catch (error) {\n        console.error(\"Error fetching planets:\", error);\n        return [];\n    }\n};\n// Check if a resident has a reptile specie\nconst $666e99b42452f813$var$isResidentReptile = async (person)=>{\n    const speciesUrls = person.species;\n    if (speciesUrls.length) {\n        const iter = async (currentIndex)=>{\n            const url = speciesUrls[currentIndex];\n            const isLastUrl = currentIndex === speciesUrls.length - 1;\n            try {\n                const specie = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(url);\n                const isReptile = specie.classification.toLowerCase() === \"artificial\";\n                return isReptile ? specie : isLastUrl ? null : iter(currentIndex + 1);\n            } catch (e) {\n                return null;\n            }\n        };\n        const reptileSpecie = await iter(0);\n        return Boolean(reptileSpecie);\n    }\n};\n// Check if a planet has a reptile resident\nconst $666e99b42452f813$var$hasPlanetReptileResident = async (planet)=>{\n    const residentUrls = planet.residents;\n    if (residentUrls.length) {\n        const iter = async (currentIndex)=>{\n            const url = residentUrls[currentIndex];\n            const isLastUrl = currentIndex === residentUrls.length - 1;\n            try {\n                const resident = await (0, $42db40512559f5bc$export$8134c072fddab6a5)(url);\n                const isReptile = await $666e99b42452f813$var$isResidentReptile(resident);\n                return isReptile ? resident : isLastUrl ? null : iter(currentIndex + 1);\n            } catch (e) {\n                return null;\n            }\n        };\n        const reptileSpecie = await iter(0);\n        return Boolean(reptileSpecie);\n    }\n    return false;\n};\n\n\n\n\n\n\nvar $210db04a67cdb6fe$export$1385d81a6c6bbcd4;\n(function(ActionTypes) {\n    ActionTypes[\"UPDATE_STATE\"] = \"UPDATE_STATE\";\n    ActionTypes[\"RESET_STATE\"] = \"RESET_STATE\";\n})($210db04a67cdb6fe$export$1385d81a6c6bbcd4 || ($210db04a67cdb6fe$export$1385d81a6c6bbcd4 = {}));\n\n\nclass $c429e947532d0e83$var$StateManager {\n    constructor(initialState, middlewares = []){\n        this.state = initialState;\n        this.initialState = initialState;\n        this.listeners = new Set();\n        this.middlewares = middlewares;\n    }\n    notify() {\n        this.listeners.forEach((cb)=>cb?.(this.state));\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    setState(newState) {\n        this.state = {\n            ...this.state,\n            ...newState\n        };\n        this.notify();\n    }\n    getState() {\n        return this.state;\n    }\n    // Method to get actions for updating or resetting the state\n    getActions() {\n        return {\n            updateState: (payload)=>({\n                    type: (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).UPDATE_STATE,\n                    payload: payload\n                }),\n            resetState: ()=>({\n                    type: (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).RESET_STATE\n                })\n        };\n    }\n    // Method to dispatch an action through middlewares and update state\n    dispatch(action) {\n        return new Promise((resolve, reject)=>{\n            // Create a middleware chain that calls each middleware in order\n            const chain = this.middlewares.reduceRight((next, middleware)=>(action)=>middleware(this, next)(action), // Final function to apply action after all middlewares have run\n            (action)=>{\n                const error = this.applyAction(action);\n                if (error) reject(error);\n                resolve(this.getState());\n            });\n            // Start the chain with the action\n            chain(action);\n        });\n    }\n    // Private method to apply action and update state accordingly\n    applyAction(action) {\n        switch(action.type){\n            case (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).UPDATE_STATE:\n                this.setState(action.payload);\n                break;\n            case (0, $210db04a67cdb6fe$export$1385d81a6c6bbcd4).RESET_STATE:\n                this.setState(this.initialState);\n                break;\n            default:\n                return new Error(\"Unknown action type\");\n        }\n    }\n}\nvar $c429e947532d0e83$export$2e2bcd8739ae039 = $c429e947532d0e83$var$StateManager;\n\n\n\nvar $e3dda3f55bf6ba98$export$2e2bcd8739ae039 = (0, $c429e947532d0e83$export$2e2bcd8739ae039);\n\n\n// Initialize StateManager with an empty initial state and no middlewares\nconst $ad2bcec7a0192558$var$initialState = {\n    planets: [],\n    isLoading: false,\n    error: null\n};\nconst $ad2bcec7a0192558$var$stateManager = new (0, $e3dda3f55bf6ba98$export$2e2bcd8739ae039)($ad2bcec7a0192558$var$initialState, []);\n// Subscribe to state changes to update the UI\n$ad2bcec7a0192558$var$stateManager.subscribe((state)=>{\n    $ad2bcec7a0192558$var$updateErrorElement(state.error);\n    $ad2bcec7a0192558$var$updateLoadingElement(state.isLoading);\n    $ad2bcec7a0192558$var$updateUI(state.planets);\n});\n// Toggle loading before and after fetch data\nfunction $ad2bcec7a0192558$var$toggleLoading(isLoading) {\n    $ad2bcec7a0192558$var$stateManager.dispatch($ad2bcec7a0192558$var$stateManager.getActions().updateState({\n        isLoading: isLoading\n    }));\n}\n// set error before and after fetch data\nfunction $ad2bcec7a0192558$var$setError(error) {\n    $ad2bcec7a0192558$var$stateManager.dispatch($ad2bcec7a0192558$var$stateManager.getActions().updateState({\n        error: error\n    }));\n}\n// Fetch planets data and update the state\nfunction $ad2bcec7a0192558$var$fetchDataAndUpdateState() {\n    $ad2bcec7a0192558$var$toggleLoading(true);\n    (0, $666e99b42452f813$export$e76d9d9ee492d406)().then((planets)=>{\n        $ad2bcec7a0192558$var$setError(null);\n        $ad2bcec7a0192558$var$stateManager.dispatch($ad2bcec7a0192558$var$stateManager.getActions().updateState({\n            planets: planets\n        }));\n    }).catch((e)=>$ad2bcec7a0192558$var$setError(e ?? new Error(\"Unknown Error\"))).finally(()=>$ad2bcec7a0192558$var$toggleLoading(false));\n}\n// Function to update the UI with planet data\nfunction $ad2bcec7a0192558$var$updateUI(planets) {\n    const container = document.getElementById(\"planet-container\");\n    container.innerHTML = \"\"; // Clear previous content\n    planets.forEach((planet)=>{\n        const card = $ad2bcec7a0192558$var$createPlanetCard(planet);\n        container.appendChild(card);\n    });\n}\n// Function to create a planet card element\nfunction $ad2bcec7a0192558$var$createPlanetCard(planet) {\n    const films = planet.filmsData.map((film)=>film.title).join(\", \");\n    const createdDate = new Date(planet.created).toDateString();\n    const cardHTML = `\n    <div class=\"planet-card p-4 rounded-lg shadow-lg space-y-4\">\n      <div class=\"planet-info bg-[#3f4045] p-4 rounded-lg block lg:hidden\n       transform transition duration-300 ease-in-out hover:scale-105 \n       hover:shadow-lg hover:brightness-110 hover:bg-gray-600\"\">\n        <div class=\"text-yellow-500\">${createdDate}</div>\n        <div class=\"flex justify-between items-center mt-2\">\n          <div>\n            <div class=\"text-xl font-bold text-white\">${planet.name}</div>\n            <div class=\"text-gray-500\">${planet.climate}</div>\n          </div>\n        </div>\n        <div class=\"text-gray-400 mt-2\">${films}</div>\n      </div>\n\n      <div class=\"planet-info bg-[#27272a] p-4 rounded-lg hidden lg:block\n      transform transition duration-300 ease-in-out hover:scale-105 mx-8\n       hover:shadow-lg hover:brightness-110 hover:bg-gray-600\"\n      \">\n        <div class=\"text-yellow-500\">${createdDate}</div>\n        <div class=\"flex justify-between items-center mt-2\">\n          <div>\n            <div class=\"text-xl font-bold text-white\">${planet.name}</div>\n            <div class=\"text-gray-400 mt-1\">${films}</div>\n          </div>\n          <div>\n            <div class=\"text-yellow-500 text-sm\">${createdDate}</div>\n            <div class=\"text-gray-500 mt-1\">${planet.climate}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n    const template = document.createElement(\"template\");\n    template.innerHTML = cardHTML.trim();\n    return template.content.firstChild;\n}\nfunction $ad2bcec7a0192558$var$updateErrorElement(error) {\n    const el = document.getElementById(\"error\");\n    el.style.display = error ? \"block\" : \"none\";\n    el.textContent = String(error);\n}\nfunction $ad2bcec7a0192558$var$updateLoadingElement(isLoading) {\n    const el = document.getElementById(\"loading\");\n    el.style.display = isLoading ? \"block\" : \"none\";\n}\n$ad2bcec7a0192558$var$fetchDataAndUpdateState();\n\n\n//# sourceMappingURL=index.15c9462f.js.map\n","import {\n  getReptilePlanets,\n  PlanetWithFilmsData,\n} from \"@packages/starwars-utilities\";\nimport StateManager from \"@packages/state-manager\";\n// Initialize StateManager with an empty initial state and no middlewares\nconst initialState = { planets: [], isLoading: false, error: null };\nconst stateManager = new StateManager(initialState, []);\n\n// Subscribe to state changes to update the UI\nstateManager.subscribe(\n  (state: {\n    planets: PlanetWithFilmsData[];\n    isLoading: boolean;\n    error: unknown;\n  }) => {\n    updateErrorElement(state.error);\n    updateLoadingElement(state.isLoading);\n    updateUI(state.planets);\n  }\n);\n// Toggle loading before and after fetch data\nfunction toggleLoading(isLoading: boolean) {\n  stateManager.dispatch(stateManager.getActions().updateState({ isLoading }));\n}\n// set error before and after fetch data\nfunction setError(error: unknown) {\n  stateManager.dispatch(stateManager.getActions().updateState({ error }));\n}\n// Fetch planets data and update the state\nfunction fetchDataAndUpdateState() {\n  toggleLoading(true);\n  getReptilePlanets()\n    .then((planets: PlanetWithFilmsData[]) => {\n      setError(null);\n      stateManager.dispatch(stateManager.getActions().updateState({ planets }));\n    })\n    .catch((e) => setError(e ?? new Error(\"Unknown Error\")))\n    .finally(() => toggleLoading(false));\n}\n\n// Function to update the UI with planet data\nfunction updateUI(planets: PlanetWithFilmsData[]) {\n  const container = document.getElementById(\"planet-container\");\n  container.innerHTML = \"\"; // Clear previous content\n  planets.forEach((planet) => {\n    const card = createPlanetCard(planet);\n    container.appendChild(card);\n  });\n}\n\n// Function to create a planet card element\nfunction createPlanetCard(planet: PlanetWithFilmsData) {\n  const films = planet.filmsData.map((film) => film.title).join(\", \");\n  const createdDate = new Date(planet.created).toDateString();\n\n  const cardHTML = `\n    <div class=\"planet-card p-4 rounded-lg shadow-lg space-y-4\">\n      <div class=\"planet-info bg-[#3f4045] p-4 rounded-lg block lg:hidden\n       transform transition duration-300 ease-in-out hover:scale-105 \n       hover:shadow-lg hover:brightness-110 hover:bg-gray-600\"\">\n        <div class=\"text-yellow-500\">${createdDate}</div>\n        <div class=\"flex justify-between items-center mt-2\">\n          <div>\n            <div class=\"text-xl font-bold text-white\">${planet.name}</div>\n            <div class=\"text-gray-500\">${planet.climate}</div>\n          </div>\n        </div>\n        <div class=\"text-gray-400 mt-2\">${films}</div>\n      </div>\n\n      <div class=\"planet-info bg-[#27272a] p-4 rounded-lg hidden lg:block\n      transform transition duration-300 ease-in-out hover:scale-105 mx-8\n       hover:shadow-lg hover:brightness-110 hover:bg-gray-600\"\n      \">\n        <div class=\"text-yellow-500\">${createdDate}</div>\n        <div class=\"flex justify-between items-center mt-2\">\n          <div>\n            <div class=\"text-xl font-bold text-white\">${planet.name}</div>\n            <div class=\"text-gray-400 mt-1\">${films}</div>\n          </div>\n          <div>\n            <div class=\"text-yellow-500 text-sm\">${createdDate}</div>\n            <div class=\"text-gray-500 mt-1\">${planet.climate}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  const template = document.createElement(\"template\");\n  template.innerHTML = cardHTML.trim();\n  return template.content.firstChild;\n}\n\nfunction updateErrorElement(error: unknown) {\n  const el = document.getElementById(\"error\");\n  el.style.display = error ? \"block\" : \"none\";\n  el.textContent = String(error);\n}\nfunction updateLoadingElement(isLoading: boolean) {\n  const el = document.getElementById(\"loading\");\n  el.style.display = isLoading ? \"block\" : \"none\";\n}\nfetchDataAndUpdateState();\n","export * from \"./models\";\nexport * from \"./utilities\";\n","export * from \"./person\";\nexport * from \"./planet\";\nexport * from \"./species\";\nexport * from \"./film\"","export interface Person {\n  name: string;\n  height: string;\n  mass: string;\n  hair_color: string;\n  skin_color: string;\n  eye_color: string;\n  birth_year: string;\n  gender: string;\n  homeworld: string;\n  films: string[];\n  species: string[];\n  vehicles: string[];\n  starships: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\n","import { Film } from \"./film\";\nimport { PaginatedResponse } from \"./paginated-response\";\nexport interface Planet {\n  name: string;\n  rotation_period: string;\n  orbital_period: string;\n  diameter: string;\n  climate: string;\n  gravity: string;\n  terrain: string;\n  surface_water: string;\n  population: string;\n  residents: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\nexport interface PlanetWithFilmsData extends Planet {\n  filmsData: Film[];\n}\nexport type PlanetsResponse = PaginatedResponse<Planet>;\n","export interface Species {\n  name: string;\n  classification: string;\n  designation: string;\n  average_height: string;\n  skin_colors: string;\n  hair_colors: string;\n  eye_colors: string;\n  average_lifespan: string;\n  homeworld: string;\n  language: string;\n  people: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\n","export interface Film {\n  title: string;\n  episode_id: number;\n  opening_crawl: string;\n  director: string;\n  producer: string;\n  release_date: string;\n  characters: string[];\n  planets: string[];\n  starships: string[];\n  vehicles: string[];\n  species: string[];\n  created: string;\n  edited: string;\n  url: string;\n}\n","export * from \"./get-reptile-planets\";\n","import { fetchData } from \"../api\";\nimport {\n  Film,\n  Person,\n  Planet,\n  PlanetWithFilmsData,\n  PlanetsResponse,\n  Species,\n} from \"../models\";\n\nexport const getReptilePlanets = async (): Promise<\n  Array<PlanetWithFilmsData>\n> => {\n  try {\n    let planets: Planet[] = [];\n    // Recursively fetch and set all planets data\n    const fetchPlanetsData = async (url: string) => {\n      const response: PlanetsResponse = await fetchData(url);\n      planets = [...planets, ...response.results];\n      let nextPageUrl = response.next;\n      if (nextPageUrl) return fetchPlanetsData(nextPageUrl);\n    };\n    await fetchPlanetsData(\"https://swapi.dev/api/planets\");\n\n    const planetPromises = planets?.map(async (planet: Planet) => {\n      if (planet.films.length === 0) {\n        return null;\n      }\n      const reptilePlanet = await hasPlanetReptileResident(planet);\n      return reptilePlanet ? planet : null;\n    });\n    let filteredPlanets = await Promise.all(planetPromises);\n    filteredPlanets = filteredPlanets.filter((planet) => planet !== null);\n    const planetsWithFilmDataPromises = filteredPlanets.map(\n      async (planet): Promise<PlanetWithFilmsData> => {\n        let filmsData: Array<Film | null> = await Promise.all(\n          planet.films.map(async (filmUrl) => {\n            try {\n              const filmData = await fetchData(filmUrl);\n              return filmData;\n            } catch {\n              return null;\n            }\n          })\n        );\n        filmsData = filmsData.filter((data) => data !== null);\n        return { ...planet, filmsData };\n      }\n    );\n    return Promise.all(planetsWithFilmDataPromises);\n  } catch (error) {\n    console.error(\"Error fetching planets:\", error);\n    return [];\n  }\n};\n// Check if a resident has a reptile specie\nconst isResidentReptile = async (person: Person): Promise<Boolean> => {\n  const speciesUrls = person.species;\n\n  if (speciesUrls.length) {\n    const iter = async (currentIndex: number): Promise<Species | null> => {\n      const url = speciesUrls[currentIndex];\n      const isLastUrl = currentIndex === speciesUrls.length - 1;\n\n      try {\n        const specie: Species = await fetchData(url);\n        const isReptile = specie.classification.toLowerCase() === \"artificial\";\n        return isReptile ? specie : isLastUrl ? null : iter(currentIndex + 1);\n      } catch (e) {\n        return null;\n      }\n    };\n    const reptileSpecie = await iter(0);\n    return Boolean(reptileSpecie);\n  }\n};\n// Check if a planet has a reptile resident\n\nconst hasPlanetReptileResident = async (planet: Planet): Promise<Boolean> => {\n  const residentUrls = planet.residents;\n  if (residentUrls.length) {\n    const iter = async (currentIndex: number): Promise<Person | null> => {\n      const url = residentUrls[currentIndex];\n      const isLastUrl = currentIndex === residentUrls.length - 1;\n      try {\n        const resident = await fetchData(url);\n        const isReptile = await isResidentReptile(resident);\n        return isReptile ? resident : isLastUrl ? null : iter(currentIndex + 1);\n      } catch (e) {\n        return null;\n      }\n    };\n    const reptileSpecie = await iter(0);\n    return Boolean(reptileSpecie);\n  }\n  return false;\n};\n","export * from \"./main-api\";\n","export const BASE_URL = \"https://swapi.dev/api\";\n\n export const fetchData = async (url: string) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch data from ${url}`);\n  }\n  return response.json();\n};\n","import StateManager from \"./state-manager\";\nexport default StateManager;\nexport * from \"./types\";\n","import {\n  Action,\n  ActionTypes,\n  State as StateType,\n  Listener,\n  Middleware,\n} from \"./types\";\n\nclass StateManager<State extends StateType> {\n  private state: Readonly<State>;\n  private initialState: State;\n  listeners: Set<Listener<State>>;\n  middlewares: Array<Middleware<State>>;\n\n  constructor(initialState: State, middlewares: Array<Middleware<State>> = []) {\n    this.state = initialState;\n    this.initialState = initialState;\n    this.listeners = new Set();\n    this.middlewares = middlewares;\n  }\n\n  private notify() {\n    this.listeners.forEach((cb) => cb?.(this.state));\n  }\n\n  subscribe(listener: Listener<State>) {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private setState(newState: Partial<State>) {\n    this.state = { ...this.state, ...newState };\n    this.notify();\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  // Method to get actions for updating or resetting the state\n  getActions() {\n    return {\n      updateState: (payload: Partial<State>) =>\n        ({\n          type: ActionTypes.UPDATE_STATE,\n          payload,\n        } as const),\n      resetState: () =>\n        ({\n          type: ActionTypes.RESET_STATE,\n        } as const),\n    };\n  }\n\n  // Method to dispatch an action through middlewares and update state\n  dispatch(action: Action<State>): Promise<State> {\n    return new Promise((resolve, reject) => {\n      // Create a middleware chain that calls each middleware in order\n      const chain = this.middlewares.reduceRight(\n        (next, middleware) => (action) => middleware(this, next)(action),\n        // Final function to apply action after all middlewares have run\n        (action: Action<State>) => {\n          const error = this.applyAction(action);\n          if (error) {\n            reject(error);\n          }\n          resolve(this.getState());\n        }\n      );\n      // Start the chain with the action\n      chain(action);\n    });\n  }\n\n  // Private method to apply action and update state accordingly\n  private applyAction(action: Action<State>) {\n    switch (action.type) {\n      case ActionTypes.UPDATE_STATE:\n        this.setState(action.payload);\n        break;\n      case ActionTypes.RESET_STATE:\n        this.setState(this.initialState);\n        break;\n      default:\n        return new Error(\"Unknown action type\");\n    }\n  }\n}\nexport default StateManager;\n","import StateManager from \"./state-manager\";\n\nexport type State = Record<string, unknown>;\nexport type Listener<S extends State> = (updatedState: S) => void;\n\nexport type Middleware<S extends State> = (\n  stateManager: StateManager<S>,\n  next: (action: Action<S>) => void\n) => (action: Action<S>) => void;\n\nexport type Action<State> = UpdateAction<State> | ResetAction;\n\nexport enum ActionTypes {\n  UPDATE_STATE = \"UPDATE_STATE\",\n  RESET_STATE = \"RESET_STATE\",\n}\nexport interface UpdateAction<State> {\n  type: ActionTypes.UPDATE_STATE;\n  payload: Partial<State>;\n}\nexport interface ResetAction {\n  type: ActionTypes.RESET_STATE;\n}\n"],"names":["ActionTypes","$210db04a67cdb6fe$export$1385d81a6c6bbcd4","$42db40512559f5bc$export$8134c072fddab6a5","url","response","fetch","ok","Error","json","$666e99b42452f813$export$e76d9d9ee492d406","planets","fetchPlanetsData","results","nextPageUrl","next","planetPromises","map","planet","films","length","reptilePlanet","$666e99b42452f813$var$hasPlanetReptileResident","filteredPlanets","Promise","all","planetsWithFilmDataPromises","filter","filmsData","filmUrl","data","error","console","$666e99b42452f813$var$isResidentReptile","person","speciesUrls","species","iter","currentIndex","isLastUrl","specie","isReptile","classification","toLowerCase","e","Boolean","residentUrls","residents","resident","$ad2bcec7a0192558$var$stateManager","constructor","initialState","middlewares","state","listeners","Set","notify","forEach","cb","subscribe","listener","add","delete","setState","newState","getState","getActions","updateState","payload","type","UPDATE_STATE","resetState","RESET_STATE","dispatch","action","resolve","reject","chain","reduceRight","middleware","applyAction","isLoading","$ad2bcec7a0192558$var$toggleLoading","$ad2bcec7a0192558$var$setError","$ad2bcec7a0192558$var$updateErrorElement","el","document","getElementById","style","display","textContent","String","$ad2bcec7a0192558$var$updateUI","container","innerHTML","card","$ad2bcec7a0192558$var$createPlanetCard","film","title","join","createdDate","Date","created","toDateString","cardHTML","name","climate","template","createElement","trim","content","firstChild","appendChild","then","catch","finally"],"version":3,"file":"index.15c9462f.js.map"}